
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #Plan is for this file to have all the specification of the LBA models of the data
> # - i.e., the 'top' model and then the reduced models with parameters fixed
> 
> your_directory<- "~/proactive_ids"
> setwd(your_directory)
> source("dmc/dmc.R")
Loading required package: msm
Loading required package: coda
Loading required package: loo
This is loo version 1.1.0
Loading required package: hypergeo
Loading required package: statmod
Loading required package: pracma
Loading required package: numDeriv
Loading required package: vioplot
Loading required package: ggplot2
Warning messages:
1: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘hypergeo’
2: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘statmod’
3: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘pracma’
4: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘numDeriv’
5: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘vioplot’
> load_model("LBA", "lba_B.R")
Loading required package: rtdists
> load("data/dats.RData")
> 
> ###First I will specify a 'top' model that allows all 
> #major parameters to vary by PM:
> #B, v, sv, t0
> 
> #This model.dmc function creates a big array that will assign parameters
> # to the appropriate cell of the design
> #check the array (parameters x design cell x accumulator) to check it worked 
> model <- model.dmc(
+     factors=list(S=c("nn", "ll"), cond= c("con", "pm")),
+     responses=c("N", "L"),
+     #Here is where we specify what can vary
+     p.map=list(A="1",B=c("cond", "R"),t0=c("cond"),mean_v=c("S", "cond", "R"),
+                sd_v=c("cond", "M"),st0="1"),
+     #match map scores true and false
+     match.map=list(M=list(nn="N", ll="L")),
+     #constants: fix an sd_v as a scaling parameter. fix variability in t0 at 0 (standard)
+     constants=c(sd_v.con.false=1, st0=0))

Parameter vector names are: ( see attr(,"p.vector") )
 [1] "A"               "B.con.N"         "B.pm.N"          "B.con.L"        
 [5] "B.pm.L"          "t0.con"          "t0.pm"           "mean_v.nn.con.N"
 [9] "mean_v.ll.con.N" "mean_v.nn.pm.N"  "mean_v.ll.pm.N"  "mean_v.nn.con.L"
[13] "mean_v.ll.con.L" "mean_v.nn.pm.L"  "mean_v.ll.pm.L"  "sd_v.con.true"  
[17] "sd_v.pm.true"    "sd_v.pm.false"  

Constants are (see attr(,"constants") ):
sd_v.con.false            st0 
             1              0 

Model type = norm (posdrift= TRUE ) 

> 
> #p.vector will be used to specify prior means
> #pick some numbers that seem somewhat sensible
> p.vector <-   c(
+   t0.con  = 0.3  ,  t0.pm   = 0.3 ,    
+   A = 0.5  ,
+   sd_v.con.true =1,  sd_v.pm.true =1,   sd_v.pm.false  =1,
+   B.con.N =1,         B.pm.N =1 ,       
+   B.con.L =1  ,      B.pm.L  =1,            
+   
+   mean_v.nn.con.N =1, mean_v.ll.con.N =0,
+   mean_v.nn.pm.N =1, mean_v.ll.pm.N =0, mean_v.nn.con.L=0,
+   mean_v.ll.con.L =1, mean_v.nn.pm.L =0, mean_v.ll.pm.L =1)
> 
> #check.p.vector checks that the p.vector has all the parameters from the model
> check.p.vector(p.vector, model)
> 
> #specify a prior with prior.p.dmc.
> p.prior <-   prior.p.dmc(
+ #names and posterior means set by p1
+   p1=p.vector,
+ #truncated normals  
+   dists=  rep("tnorm", length(p.vector)),
+ #standard deviations of prior 
+ # param order :t0, A, sv, B, mv            
+   p2= c(rep(1,2),1,rep(1,3),rep(1,4),rep(2,8)),
+ #lower bounds of prior. Same param order
+ #t0 lower bound 0.1 seconds
+ #starting point 0, sd_v 0, B (which is b-A) 0, rates no truncation
+   lower=c(rep(0.1,2),0,rep(0,3),rep(0,4), rep(NA, 8)),
+ #t0 upper bound 1s, the rest inf
+   upper=c(rep(1,2),rep(NA, length(p.vector)-2))
+   )
> 
> #binds the data and the model together into one object
> dm <- data.model.dmc(dats,model)
> #generates start points for the sampling process out of the prior.
> #We will save off samples here, then deploy them on the newcastle supercomputing
> #grid (using grid_dispatch.R)
> # top_samples <- h.samples.dmc(nmc = 180,p.prior,dm)
> 
> # #load fixed-effects fitting
> # load("top_samples_LBA.RData")
> # 
> # ##Hierarchical priors
> # # use same priors for hierarchical means as the individual subject priors
> # # use gamma distributions for hierarchical sd priors
> # p1 <- get.p.vector(top_samples[[1]])[names(p.prior)]
> # s.prior <- prior.p.dmc(p1=p1,p2=p1,
> # dists=rep("gamma",length(p1)))
> # pp.prior=list(p.prior,s.prior)
> # hstart <- make.hstart(top_samples)
> # theta1 <- make.theta1(top_samples)
> #h_top_samples <- h.samples.dmc(nmc=180,p.prior,dm,pp.prior,
>  #    hstart.prior=hstart,theta1=theta1,thin=1)
> 
> ##Request all the cores available on cl2
> cores=64
> 
> #Firstly start the sampling to look for 'stuck' chains- chains that run off
> #and get stuck in unlikely regions
> #Note run.unstuck does not give you your valid final samples (p.migrate is on)
> #you have to run without it after
> # h_top_samples  <- h.run.unstuck.dmc(h_top_samples, p.migrate = .05, cores = cores)
> # save(h_top_samples,file="h_topunstuck_LBA.RData")
> # load("h_topunstuck_LBA.RData")
> # #Next run to convergence
> # h_top_samples1 <- h.run.converge.dmc(h.samples.dmc(nmc=60, samples=h_top_samples,thin=15), nmc=60,
> #   thorough=TRUE,cores=cores,finalrun=FALSE,max.try=3)
> # save(h_top_samples1,file="h_top_samples_LBA.RData")
> 
> load("~/proactive_ids/h_top_samples_LBA.RData")
> h_top_samples2 <- h.run.converge.dmc(h.samples.dmc(nmc=60, samples=h_top_samples1,thin=15), nmc=60,
+   thorough=TRUE,cores=cores,max.try=10)
10  20  30  40  50  60  
3233  449  101  182  511 3173  235 2173 3075 2102  183 2178 2182  405 3077 3119 
1.05 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 
3027 2151 2104  243 2512 2317 3144  407 3083  114  107 2344 3246 3421 3412  451 
1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.07 1.07 1.07 1.07 
2118 2301 3141 3401 3061 3082 2505 3419 2513 3086  124 3120 2152  421 3121 3189 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
3099 3422  303  202 2191 2309 3051 3137 2308  158 3032 3193 3123 3028 2164 3172 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
3241  148 3103  506  484 2334  432  133 2132 3059  476  181 3410 2159 3171  415 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
3416 2373 2518 3185  234 2150 2525  209 3133  190  321 3163 2126 3080  486 3406 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
2311  102 2506 2165 2145 2524 3096 2125 3225  333 2157 2161  213 3154 3203  404 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
3124 3021 2312 2355 3084 3058  458 3249 2179 3237 3235 2343 3153 2193 3245  424 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
2357  409 2310  177 2103 3243 3132 2172 3160 3417 3242 2342  122  413 3015 2521 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
2349  416  141 3064 2134  331 3208 2363  302  515 3254 3181 3182 2321  471 3072 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
3197 2517 2170  327 3143  332 3052 2130 3145 3429 2515  455 3024 2184  263  174 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.08 
 241  510 3116  237 2325 3038  406 3213 3180  462 2136 3415  299 3109 3423 2345 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
 317 2307 3210 2510 3060  326 2306 3100  307 3405 2110 3190  454 2180 2507  294 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3223 3094  164  288 2194 3070 3426 2370  212 3129  289  117 3067  233 2336 3252 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3195 3127 2181  448  227  230 2528 2154 3062  296 2361 3053 2189  433 3118 3411 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3142  436 3085  314 3164 2516 3414  308 3139  215 2326 2162  446  153  147  143 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
 109 2327 2304  445 3112  144 2129 2156 3219 2188  501 3019 3227 2337 2523 3201 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3122 2329  229 3101 3131  418  223  231 3238 3128  414 2122 3236  135 2127  442 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3078  493 3149 2503 3039 2360 2121 2350 3090 3177 2117  417 2502 3148 2313 3226 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
2511  468 3056 2351  290 2106 3071 2183  412 3110 3065 2341 3216 2153  507 3408 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
2114  121 2320 2112  184  292 3230 2113  601 3188 2109 2195 3081 2101  170 3175 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3134 3104  210  110 2155 3069  207  512 3247  269 3196 3020  240 2371 3126 2338 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3402 2198 3407  271 3206  104 2174 2116  187 3105  602 3409 3244 3179 2105  157 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.09 1.09 1.09 
2169 3136 3165  186 3251 3138 3199 2302  113  497 3113 3212 2319  159  425  460 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 
 474 3202  115 2146 2333 2367 2142  268 3087  252  236 3050  461 3431 2148 3079 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 
 469  151 3253  419 3155  119 3161  311  324  200 2131 3102 2163 3055 2137 2323 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 
 483  479 3130 3425 3430 2356 2171  214 2143  219  295  139  264  402  224  166 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.10 1.10 1.10 1.10 1.10 1.10 1.10 1.10 
2359 3106  291  255  273 2111 2324 2530 3049 3198 3073 2514  244 
1.10 1.10 1.10 1.10 1.10 1.10 1.10 1.10 1.10 1.10 1.11 1.11 1.13 
Mean
[1] 1.08
Iterations = 60, Effective N = NA, Maximum psrf = 1.09> save(h_top_samples2,file="h_top_samples2_LBA.RData")
> 
> h_top_samples3 <- h.run.converge.dmc(h.samples.dmc(nmc=60, samples=h_top_samples2,thin=15), nmc=60,
+   thorough=TRUE,cores=cores,finalrun=TRUE, finalI=180, max.try=10)
10  20  30  40  50  60  
3102 2103 2357 3173 2325 3101 3104  215 3071 2182 3175 3417 3225 2106 3075  117 
1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.07 1.07 1.07 
2512  405 3249 2302  107 2319 2528 2134 2336 2104 2338  419 3177 3131  143 2349 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
3084 3245 3182 3123 2506  512  451 3065 3137 2309 2129 3021  148 3109 3254 2145 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
2344 3027 3163  113  210 3072  417 3028 2137  159 3212 2178 3126 2359 2308 3203 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
2132  302 3039 2507 2125  241  273  510 2351 2514  268 3096  181 3411  135 2510 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
2126 2127 2363 3401 3412 2174 2191  207  483 3149 2169 2320 3139 3067 2157 3148 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
 446 2304 3141  184 2155  243 3127  424 3416  299 3236 3179 3210 3181  333 3246 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
2513 3414  202 2515 3408  418  303 2109 3100 2163 2113 3116  170  144 2198 3206 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
 252 3407 2164 2373 3193  269 3051 2150 3213 3079 2181 2116  454 3160 2311  331 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
 115 2151  448 3165 3078 3188  237 2101  332 2122 3227  445 3062 2321 2502 3020 
1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 1.07 
2327  235  317 3172 3019 3086  231 2307 2142 3421 3201 2179 2195  501 3064  469 
1.07 1.07 1.07 1.07 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
2152 2521 2342  110 3189  484 3425  102 3080 2343 3058 3032  442 3061 3121  177 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
 213 2310 2136 2173 3195 3238 2156 3406  462 2505 2117 3415 3161  174 2110  291 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
2171 3081 2524  432 3106 3402  455 2162 2345 2193  296 3112 3429  219 2518 3119 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3422 2326 3144  511  412  133 2341 3120 3059 3142 3069  515  506 3015 3202 2337 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3083  602 3085 3230 2146 3164  124 3237 3090 3196  227  164 3199  486 3132 3077 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
 190 2148 2517 2503  264  109  601 3208 2118 2350  271  141 3050 3118  101 2313 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3128  326  139 3103 3060 2329  460 3409 3113 2301 2121 2170 3154 3241  158 2188 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
 409  290 2194  324 2165  425 3070  234 3233  294 2317 3136 3052  147 2323 3197 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
 119  436 3099 2530 2333 2154 2112 2180  407  474  157  449 2161 3143 3242  183 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3410  308 2159 2334 2511 2153 3053 2523 3124  114  224 2189  421  415 3130  461 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 
3198 3253 3423 3024  288 2172 2356 3219  479  104 2367 3082  233 3216 3190 3145 
1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.08 1.09 1.09 1.09 1.09 1.09 
2312 2361 3171  182 2111  468  497 3105 3235  507 2355 2184  292  289 3226 3134 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 
3133 3038 3129 3405  186 3251  187  229 2360  209 3056 3087  223 3185  406 2516 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 
2183 3431 2525 3244 3122 2371  414  404 3252  307 3055  416  321 3110 2130  200 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 
 230  240 2324 2131  236 2102  212 3243  433 3180 3094 3223 3138 3419  476  458 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 
3153  413  122 3073 2370 2114 2105  493  153  151 3155  214 2306 3430 3247 3049 
1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.10 1.10 1.10 1.10 1.10 1.10 1.10 
 311  327 2143  314  263 3426  471  255  166  295  121  402  244 
1.10 1.10 1.10 1.10 1.10 1.10 1.10 1.11 1.11 1.11 1.11 1.11 1.11 
Mean
[1] 1.08
Iterations = 60, Effective N = NA, Maximum psrf = 1.08

Doing final run
10  20  30  40  50  60  70  80  90  100  110  120  130  140  150  160  170  180  
> save(h_top_samples3,file="h_top_samples3_LBA.RData")
> 
> #t0 fixed over PM condition
> 
> #thresholds fixed over PM condition
> 
> #mean_v fixed over PM condition
> 
> #sd_v fixed over PM condition
> 
> 
> 
>   # 
> 
> proc.time()
      user     system    elapsed 
11185800.1  2614445.3   637720.6 
